using Bitmap = System.Drawing.Bitmap;
using Color = System.Drawing.Color;
using Nextem.String;

namespace Daebreak {
	[Record(Include=[Moles])]
	public class Model {
		public Moles : Moles;
		
		public this() {
			Moles = []
		}
		
		public Box(pos : Point, size : Point, mat : Material = null) : Model {
			Model(Molecule(pos, size, mat) :: this.Cut(pos, size).Moles)
		}
		
		public Cut(cutpos : Point, cutsize : Point) : Model {
			def cutmole = Molecule(cutpos, cutsize, null);
			def cutend = cutmole.End;
			
			def cut(moles : Moles, accum=[]) {
				match(moles) {
					| [] => accum
					| head :: tail =>
						if(head.Intersects(cutmole)) {
							def (mpos, msize, mat) = head;
							def mend = head.End;
							
							def accum = 
								if(mpos[0] < cutpos[0]) {
									Molecule(
										mpos,
										(cutpos[0] - mpos[0], msize[1], msize[2]),
										mat
									) :: accum
								} else accum;
							def accum = 
								if(mend[0] > cutend[0]) {
									Molecule(
										(cutend[0], mpos[1], mpos[2]),
										(mend[0] - cutend[0], msize[1], msize[2]),
										mat
									) :: accum
								} else accum;
							
							def xoff = if(mpos[0] < cutpos[0]) cutpos[0] - mpos[0] else 0f;
							def xsize = msize[0] - xoff - if(mend[0] > cutend[0]) mend[0] - cutend[0] else 0f;
							def accum = 
								if(mpos[1] < cutpos[1]) {
									Molecule(
										(mpos[0] + xoff, mpos[1], mpos[2]),
										(xsize, cutpos[1] - mpos[1], msize[2]),
										mat
									) :: accum
								} else accum;
							def accum = 
								if(mend[1] > cutend[1]) {
									Molecule(
										(mpos[0] + xoff, cutend[1], mpos[2]),
										(xsize, mend[1] - cutend[1], msize[2]),
										mat
									) :: accum
								} else accum;
							
							def yoff = if(mpos[1] < cutpos[1]) cutpos[1] - mpos[1] else 0f;
							def ysize = msize[1] - yoff - if(mend[1] > cutend[1]) mend[1] - cutend[1] else 0f;
							def accum = 
								if(mpos[2] < cutpos[2]) {
									Molecule(
										(mpos[0] + xoff, mpos[1] + yoff, mpos[2]),
										(xsize, ysize, cutpos[2] - mpos[2]),
										mat
									) :: accum
								} else accum;
							def accum = 
								if(mend[2] > cutend[2]) {
									Molecule(
										(mpos[0] + xoff, mpos[1] + yoff, cutend[2]),
										(xsize, ysize, mend[2] - cutend[2]),
										mat
									) :: accum
								} else accum;
							
							accum.Append(tail)
						} else
							cut(
								tail,
								head :: accum
							)
				}
			}
			
			Model(cut(Moles))
		}
		
		public Emboss(pos : Point, size : Point, cut : list [list [float]]) : Model {
			def rowDelta = size[1] / (cut.Length :> float);
			def colDelta = size[0] / (cut.Head.Length :> float);
			
			def emboss(cut, accum, row = 0f) {
				def sub(cut, accum, col = 0f) {
					match(cut) {
						| [] => accum
						| head :: tail =>
							sub(
								tail,
								if(head == 1f) accum
								else
									accum.Cut(
										(pos[0] + col*colDelta, pos[1] + row*rowDelta, pos[2]),
										(colDelta, rowDelta, size[2] * (1f - head))
									),
								col + 1f
							)
					}
				}
				
				match(cut) {
					| [] => print "done {0}" <- accum.Moles.Length; accum
					| head :: tail =>
						print "{0} -- {1}" <- (row, accum.Moles.Length);
						emboss(
							tail,
							sub(head, accum),
							row + 1f
						)
				}
			}
			
			emboss(cut, this)
		}
		
		public Emboss(pos : Point, size : Point, fn : string) : Model {
			def img = Bitmap(fn);
			
			def pixelsToList(row=0, accum=[]) {
				def sub(col=0, accum=[]) {
					if(col == img.Width) accum.Reverse()
					else
						sub(
							col+1,
							(img.GetPixel(col, row).R :> float) / 255f :: accum
						)
				}
				
				if(row == img.Height) accum
				else
					pixelsToList(
						row+1,
						sub() :: accum
					)
			}
			
			Emboss(pos, size, pixelsToList())
		}
		
		public Translate(amt : Point) : Model {
			def (tx, ty, tz) = amt;
			
			def translate(moles : Moles, accum=[]) {
				match(moles) {
					| [] => accum
					| (pos, size, mat) :: tail =>
						def (x, y, z) = pos;
						translate(
							tail,
							Molecule((x+tx, y+ty, z+tz), size, mat) :: accum
						)
				}
			}
			
			Model(translate(Moles))
		}
		
		public Render() : void {
			foreach(mole in Moles)
				mole.Render()
		}
	}
}
