using System.Math;
using Nextem.String;

namespace Daebreak {
	[Record]
	public class Vector3D {
		public static Zero : Vec3 = Vec3(0f, 0f, 0f);
		public static PointZero : Point = (0f, 0f, 0f);
		
		public X : float;
		public Y : float;
		public Z : float;
		
		public Item [index : int] : float {
			get {
				match(index) {
					| 0 => X
					| 1 => Y
					| 2 => Z
					| _ => 0f
				}
			}
		}
		
		public override ToString() : string {
			"({0}, {1}, {2})" <- (X, Y, Z)
		}
		
		public static @:(a : Vec3) : Point {
			(a.X, a.Y, a.Z)
		}
		
		public static @==(a : Vec3, b : Vec3) : bool {
			if(a : object == null || b : object == null) false
			else a.Equals(b)
		}
		
		public override Equals(b : object) : bool {
			| null => false
			| b is Vec3 => X == b.X && Y == b.Y && Z == b.Z
			| _ => false
		}
		
		public static @+(a : Vec3, b : Vec3) : Vec3 {
			Vec3(
				a.X + b.X,
				a.Y + b.Y,
				a.Z + b.Z,
			)
		}
		
		public static @+(a : Vec3, b : float) : Vec3 {
			Vec3(
				a.X + b,
				a.Y + b,
				a.Z + b,
			)
		}
		
		public static @-(a : Vec3, b : Vec3) : Vec3 {
			Vec3(
				a.X - b.X,
				a.Y - b.Y,
				a.Z - b.Z,
			)
		}
		
		public static @-(a : Vec3, b : float) : Vec3 {
			Vec3(
				a.X - b,
				a.Y - b,
				a.Z - b,
			)
		}
		
		public static @*(a : Vec3, b : Vec3) : Vec3 {
			Vec3(
				a.X * b.X,
				a.Y * b.Y,
				a.Z * b.Z,
			)
		}
		
		public static @*(a : Vec3, b : float) : Vec3 {
			Vec3(
				a.X * b,
				a.Y * b,
				a.Z * b,
			)
		}
		
		public Cross(b : Vec3) : Vec3 {
			Vec3(
				(Y * b.Z) - (b.Y * Z),
				(Z * b.X) - (b.Z * X),
				(X * b.Y) - (b.X * Y)
			)
		}
		
		public Dot(b : Vec3) : float {
			(X * b.X) + (Y * b.Y) + (Z * b.Z)
		}
		
		public Abs() : Vec3 {
			Vec3(Abs(X), Abs(Y), Abs(Z))
		}
		
		public Sqrt() : Vec3 {
			Vec3(
				Sqrt(X) :> float, 
				Sqrt(Y) :> float, 
				Sqrt(Z) :> float
			)
		}
		
		public Sum() : float {
			X + Y + Z
		}
		
		public Distance(b : Vec3) : float {
			Sqrt((this*this + b*b).Sum()) :> float
		}
	}
	
	public type Vec3 = Vector3D;
	public type Point = float * float * float;
}
