using Nemerle.Imperative;
using Nextem.String;

namespace Daebreak {
	[Record]
	public class Triangle {
		public Points : Point * Point * Point;
		public VecPoints : Vec3 * Vec3 * Vec3 {
			get { (Vec3(Points[0]), Vec3(Points[1]), Vec3(Points[2])) }
		}
		
		public override ToString() : string {
			"Tri({0}, {1}, {2})" <- (Points[0], Points[1], Points[2])
		}
		
		public InsideBox(org : Point, size : Point) : bool {
			def (a, b, c) = Points;
			
			InsideBox(a, org, size) && 
			InsideBox(b, org, size) && 
			InsideBox(c, org, size)
		}
		
		public static InsideBox(Point : Point, org : Point, size : Point) : bool {
			def (px, py, pz) = Point;
			def (x, y, z) = org;
			def (sx, sy, sz) = size;
			
			px >= x && px <= x+sx && 
			py >= y && py <= y+sy && 
			pz >= z && pz <= z+sz
		}
		
		public Translate(vec : Vec3) : Triangle {
			def (a, b, c) = Points;
			
			Triangle(
				Vec3(a) + vec,
				Vec3(b) + vec,
				Vec3(c) + vec
			)
		}
		
		public Intersect(b : Triangle) : bool * bool * Vec3 * Vec3 { Intersect(this, b) }
		
		public static Intersect(a : Triangle, b : Triangle) : bool * bool * Vec3 * Vec3 {
			def computeIntervals(verts : Vec3 * Vec3 * Vec3, vv : Vec3, d : Vec3) {
				def isect2(verts : Vec3 * Vec3 * Vec3, vv : Vec3, d : Vec3) {
					def tmp = d[0]/(d[0]-d[1]);
					def isect0 = vv[0]+(vv[1]-vv[0])*tmp;
					def diff = (verts[1]-verts[0])*tmp;
					def isectpoint0 = diff + verts[0];
					def tmp = d[0]/(d[0]-d[2]);
					def isect1 = vv[0]+(vv[2]-vv[0])*tmp;
					def diff = (verts[2]-verts[0])*tmp;
					def isectpoint1 = verts[0] + diff;
					
					(false, (isect0, isect1), (isectpoint0, isectpoint1))
				}
				
				if(d[0]*d[1] > 0f)
					isect2(
						(verts[2], verts[0], verts[1]),
						Vec3(vv[2], vv[0], vv[1]),
						Vec3(d[2], d[0], d[1])
					)
				else if(d[0]*d[2] > 0f)
					isect2(
						(verts[1], verts[0], verts[2]),
						Vec3(vv[1], vv[0], vv[2]),
						Vec3(d[1], d[0], d[2])
					)
				else if(d[1]*d[2] > 0f || d[0] != 0f)
					isect2(verts, vv, d)
				else if(d[1] != 0f)
					isect2(
						(verts[1], verts[0], verts[2]),
						Vec3(vv[1], vv[0], vv[2]),
						Vec3(d[1], d[0], d[2])
					)
				else if(d[2] != 0f)
					isect2(
						(verts[2], verts[0], verts[1]),
						Vec3(vv[2], vv[0], vv[1]),
						Vec3(d[2], d[0], d[1])
					)
				else (true, (0f, 0f), (Vec3.Zero, Vec3.Zero))
			}
			
			def coplanarIsect(n : Vec3, a : Vec3 * Vec3 * Vec3, b : Vec3 * Vec3 * Vec3) {
				def abs = n.Abs();
				def (i0, i1) = 
					if(abs[0] > abs[1]) if(abs[0] > abs[2]) (1, 2) else (0, 1)
					else if(abs[2] > abs[1]) (0, 1) else (0, 2);
				
				def edgeAgainstTri(v0 : Vec3, v1 : Vec3, u0 : Vec3, u1 : Vec3, u2 : Vec3) {
					def ax = v1[i0]-v0[i0];
					def ay = v1[i1]-v0[i1];
					
					def edgeEdge(v : Vec3, u0 : Vec3, u1 : Vec3) {
						def bx = u0[i0]-u1[i0];
						def by = u0[i1]-u1[i1];
						def cx = v[i0]-u0[i0];
						def cy = v[i1]-u0[i1];
						def f = ay*bx-ax*by;
						def d = by*cx-bx*cy;
						
						if((f > 0f && d >= 0f && d <= f) || (f < 0f && d <= 0f && d >= f)) {
							def e = ax*cy-ay*cx;
							if(f > 0f) e >= 0f && e <= f
							else e <= 0f && e >= f
						} else false
					}
					
					edgeEdge(v0, u0, u1) || 
					edgeEdge(v0, u1, u2) ||
					edgeEdge(v0, u2, u0)
				}
				
				def pointInTri(v0, u0, u1, u2) {
					def a = u1[i1] - u0[i1];
					def b = -(u1[i0] - u0[i0]);
					def c = -a*u0[i0] - b*u0[i1];
					def d0 = a*v0[i0] + b*v0[i1] + c;
					
					def a = u2[i1] - u1[i1];
					def b = -(u2[i0] - u1[i0]);
					def c = -a*u1[i0] - b*u1[i1];
					def d1 = a*v0[i0] + b*v0[i1] + c;
					
					def a = u0[i1] - u2[i1];
					def b = -(u0[i0] - u2[i0]);
					def c = -a*u2[i0] - b*u2[i1];
					def d2 = a*v0[i0] + b*v0[i1] + c;
					
					d0*d1 > 0f && d0*d2 > 0f
				}
				
				edgeAgainstTri(a[0], a[1], b[0], b[1], b[2]) || 
				edgeAgainstTri(a[1], a[2], b[0], b[1], b[2]) || 
				edgeAgainstTri(a[2], a[0], b[0], b[1], b[2]) || 
				pointInTri(a[0], b[0], b[1], b[2]) || 
				pointInTri(b[0], a[0], a[1], a[2])
			}
			
			def sort(a, b) {
				if(a <= b) ((a, b), true)
				else ((b, a), false)
			}
			
			def (v0, v1, v2) = a.VecPoints;
			def (u0, u1, u2) = b.VecPoints;
			
			def n1 = (v1 - v0) cross (v2 - v0);
			def d1 = -(n1 dot v0);
			
			def du0 = (n1 dot u0) + d1;
			def du1 = (n1 dot u1) + d1;
			def du2 = (n1 dot u2) + d1;
			
			when(du0*du1 > 0f && du0*du2 > 0f)
				return (false, false, Vec3.Zero, Vec3.Zero);
			
			def n2 = (u1 - u0) cross (u2 - u0);
			def d2 = -(n2 dot u0);
			
			def dv0 = (n2 dot v0) + d2;
			def dv1 = (n2 dot v1) + d2;
			def dv2 = (n2 dot v2) + d2;
			
			when(dv0*dv1 > 0f && dv0*dv2 > 0f)
				return (false, false, Vec3.Zero, Vec3.Zero);
			
			def d = (n1 cross n2).Abs();
			def index =
				if(d[0] >= d[1] && d[0] >= d[2]) 0
				else if(d[1] >= d[0] && d[1] >= d[2]) 1
				else 2;
			
			def (coplanar, isect1, (isectpointA1, isectpointA2)) = computeIntervals(
				a.VecPoints, 
				Vec3(v0[index], v1[index], v2[index]),
				Vec3(dv0, dv1, dv2)
			);
			
			when(coplanar)
				return (coplanarIsect(n1, a.VecPoints, b.VecPoints), true, Vec3.Zero, Vec3.Zero);
			
			def (_, isect2, (isectpointB1, isectpointB2)) = computeIntervals(
				b.VecPoints,
				Vec3(u0[index], u1[index], u2[index]),
				Vec3(du0, du1, du2)
			);
			
			def (isect1, smallest1) = sort(isect1);
			def (isect2, smallest2) = sort(isect2);
			
			if(isect1[1] < isect2[0] || isect2[1] < isect1[0]) (false, false, Vec3.Zero, Vec3.Zero)
			else if(isect2[0] < isect1[0])
				(
					true,
					false,
					if(smallest1) isectpointA1 else isectpointA2,
					if(isect2[1] < isect1[1]) if(smallest2) isectpointB2 else isectpointB1
					else if(smallest1) isectpointA2 else isectpointA1
				)
			else
				(
					true,
					false,
					if(smallest2) isectpointB1 else isectpointB2,
					if(isect2[1] > isect1[1]) if(smallest1) isectpointA2 else isectpointA1
					else if(smallest2) isectpointB2 else isectpointB1
				)
		}
		
		public IntersectList(mesh : Mesh, includeCoplanar : bool = true) : list [Triangle * bool * Vec3 * Vec3] {
			def iter(mesh, accum = []) {
				match(mesh) {
					| [] => accum
					| head :: tail =>
						def (hit, coplanar, p1, p2) = Intersect(head);
						iter(
							tail,
							if(
								hit && 
								(includeCoplanar || !coplanar)
							) (head, coplanar, p1, p2) :: accum
							else accum
						)
				}
			}
			
			iter(mesh)
		}
		
		public Tessellate(cutMesh : Mesh, accum : Mesh = null) : Mesh {
			def accum = if(accum == null) [] else accum;
			def (a, b, c) = VecPoints;
			
			def isect = IntersectList(cutMesh, includeCoplanar=false);
			def isectTris = isect.Map(
					fun(elem : Triangle * bool * Vec3 * Vec3) : Triangle {
						elem[0]
					}
				);
			
			def checkTri(t) {
				def coll = t.IntersectList(cutMesh, includeCoplanar=false);
				
				def coll = coll.Filter(
						fun(elem) {
							def (tri, _, _, _) = elem;
							
							!isectTris.Contains(tri)
						}
					);
				
				coll.Length == 0
			}
			
			def getPoints(hits, accum = []) {
				match(hits) {
					| [] => accum
					| (_, _, p1, p2) :: tail =>
						def accum = 
							if(accum.Contains(p1)) accum
							else p1 :: accum;
						def accum = 
							if(accum.Contains(p2)) accum
							else p2 :: accum;
						getPoints(tail, accum)
				}
			}
			
			def addPointTri(point : Vec3, accum) {
				def t = Triangle(a, b, point);
				def accum = 
					if(checkTri(t)) t :: accum
					else accum;
				
				def t = Triangle(b, c, point);
				def accum = 
					if(checkTri(t)) t :: accum
					else accum;
				
				def t = Triangle(c, a, point);
				if(checkTri(t)) t :: accum
				else accum
			}
			
			def addTris(points : list [Vec3], accum : Mesh) {
				match(points) {
					| [] => accum
					| point :: tail =>
						addTris(
							tail,
							addPointTri(
								point,
								accum
							)
						)
				}
			}
			
			def addLineTris(isect : list [Triangle * bool * Vec3 * Vec3], accum : Mesh) {
				match(isect) {
					| [] => accum
					| (_, _, p1, p2) :: tail =>
						def t = Triangle(a, p1, p2);
						def accum = 
							if(checkTri(t)) t :: accum
							else accum;
						
						def t = Triangle(b, p1, p2);
						def accum = 
							if(checkTri(t)) t :: accum
							else accum;
						
						def t = Triangle(c, p1, p2);
						def accum = 
							if(checkTri(t)) t :: accum
							else accum;
						
						addLineTris(tail, accum)
				}
			}
			
			if(isect.Length == 0) accum
			else {
				def points = getPoints(isect);
				
				addLineTris(
					isect,
					addTris(
						points,
						accum
					)
				)
			}
		}
	}
	
	public type Mesh = list [Triangle];
}
