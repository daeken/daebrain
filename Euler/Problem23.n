using System;
using Nemerle.Imperative;

def facsum(num, top, primes, sum) {
	match(primes) {
		| [] => sum | head :: tail => 
			if(head > top) sum
			else facsum(num, top, tail, sum + if(num % head == 0) head + if(head*head != num) num / head else 0 else 0)
	}
}

def nonabunsum(num, primes, abundant, abundantrev, sum) {
	if(num == 28124) sum
	else {
		def fac = facsum(num, Math.Sqrt(num) :> int, primes, 1);
		when(num % 100 == 0) Console.WriteLine("{0} {1}", num, fac);
		def sum = sum + check: {
			foreach(x in abundant)
				foreach(y in abundantrev) {
					when(x + y == num) check(0);
					when(x + y >= num) break
				}
			num
		}
		nonabunsum(
			num+1, if(fac == 1) (num :: primes.Rev()).Rev() else primes, 
			if(fac > num) num :: abundant else abundant, if(fac > num) (num :: abundantrev.Rev()).Rev() else abundant, sum)
	}
}

Console.WriteLine(nonabunsum(2, [], [], [], 1))
